<?xml version="1.0" encoding="UTF-8"?>
	<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.excel" />
	
	<!--  数据源配置方式1  使用spring配置hibernate -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<property name="jdbcUrl">
			<value>jdbc:mysql://192.168.1.100/test</value>
		</property>
		<property name="user">
			<value>root</value>
		</property>
		<property name="password">
			<value>root</value>
		</property>
		<property name="minPoolSize">
			<value>5</value>
		</property>
		<property name="maxPoolSize">
			<value>20</value>
		</property>
		<property name="maxIdleTime">
			<value>1800</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>1800</value>
		</property>
		<property name="maxStatements">
			<value>0</value>
		</property>
	</bean>

	<!-- JDBC事务配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean id="transactionManagerJdbc" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource" ></property>
	</bean>
	
	<bean id="personDaoB" class="framework.Spring.transaction.dao.impl.PersonDaoImplB">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>
	
	<bean id="personDaoA" class="framework.Spring.transaction.dao.impl.PersonDaoImplA">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
		<property name="personDaoB" ref="personDaoB"/>
	</bean>
	<bean id="personService" class="framework.Spring.transaction.service.impl.PersonServiceImpl">
		<property name="personDaoA" ref="personDaoA"/>
		<property name="personDaoB" ref="personDaoB"/>
	</bean>
	<bean id="personAction" class="framework.Spring.transaction.action.PersonAction">
		<property name="personService">
			<ref local="personService" />
		</property>
	</bean>
	
		<!-- Spring事务配置的五种方式 -->
	<!-- 第一种方式：每个Bean都有一个代理 -->
<!-- 	<bean id="personDaoProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManagerJdbc"></property>
		<property name="target" ref="personDao"></property>
		<property name="proxyInterfaces" value="framework.Spring.transaction.dao.PersonDao"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- 第四种使用切点方式 -->
	<!-- <tx:advice>用来指明使用事务的传播方式与隔离级别-->
	<tx:advice id="adviceTransactionManagerJdbcA" transaction-manager="transactionManagerJdbc">
		<tx:attributes>
			<!-- ISOLATION会锁定数据库,强制以单线程的方式运行,其它用户无法对数据库数据进行修改 -->
			<!-- ISOLATION:REPEATABLE_READ,不可重复读,本事务读取的数据不受B事务修改的影响 -->
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
			<!-- isolation事务的隔离级别 1 SERIALIZABLE(事务串行执行,资源消耗最大), 2 REPEATABLE_READ(保证一个事务不会修改, 另一个事务读取,但没有提交的数据l) -->
			<!-- NOT_SUPPORTED当前方法或类不支持事物 -->
			<!-- <tx:method name="save*" propagation="NOT_SUPPORTED" /> -->
			<!-- PROPAGATION_REQUIRED 保证当前运行的事务为一个,如果事务中的一个方法异常,那么所有方法回滚 -->
			<!-- <tx:method name="*" propagation="REQUIRED"/> -->
			<!-- PROPAGATION_SUPPORTS 当前事务的方法会独立执行,一方异常,另一方不会回滚 ,相当于没有事务 -->
			<!-- <tx:method name="save*" propagation="SUPPORTS"/> -->
			<!-- PROPAGATION_MANDATORY 如果不在一个事务中会抛异常 -->
			<!-- <tx:method name="save*" propagation="MANDATORY"/> -->
		</tx:attributes>
	</tx:advice>
	
	<!-- 事务的隔离级别必须在两个不同的事务中才可用,也就是说,必须有一个事务为propergation_required_new,如果在同一个事务中,那么无论如何都会读取到其中一个事务提交的数据 -->
	<tx:advice id="adviceTransactionManagerJdbcB" transaction-manager="transactionManagerJdbc">
		<tx:attributes>
			<!-- isolation事务的隔离级别 1 SERIALIZABLE(事务串行执行,资源消耗最大), 2 REPEATABLE_READ(保证一个事务不会修改, 另一个事务读取,但没有提交的数据l) -->
			<!-- <tx:method name="save*" propagation="REQUIRED" /> -->
			<!-- PROPAGATION_REQUIRED 保证当前运行的事务为一个,如果事务中的一个方法异常,那么所有方法回滚 -->
			<!-- <tx:method name="*" propagation="REQUIRED"/> -->
			<!-- PROPAGATION_SUPPORTS 支持事务,依靠另一个主事务,如果有主事务,那么运行在主事务中(与主事务共用一个事务),如果没有,那么不运行在事务中 -->
			<!-- <tx:method name="save*" propagation="SUPPORTS"/> -->
			<!-- PROPAGATION_MANDATORY 强制的 必须运行在父事务中(本类或方法与父事务共用一个事务),如果没有父事务,那么报异常(No existing transaction found) -->
			<!-- <tx:method name="save*" propagation="MANDATORY"/> -->
			<!-- PROPERGATION_REQUIRES_NEW 新建子事务,依赖于父事务, 父事务的异常回滚后,子事务可正常提交,子事务异常,父子事务都回滚-->
			<!-- <tx:method name="save*" propagation="REQUIRES_NEW"/> -->
			<!-- 以非事务的方式运行方法或类 -->
			<!-- <tx:method name="save*" propagation="NOT_SUPPORTED"/> -->
			<!-- PROPERGATION_NEVER 以非事务的方式执行,如果有父事务存在,那么抛异常(Existing transaction found) -->
			<!-- <tx:method name="save*" propagation="NEVER"/> -->
			<!-- PROPERGATION_NASTED 嵌套,和NEW不同的地方是父类异常子类也回滚,子类异常父类同样会回滚 -->
			<!-- ISOLATION:READ_UNCOMMITTED 事务2可读取未提交数据, -->
			<!-- <tx:method name="save*" propagation="NESTED" isolation="READ_UNCOMMITTED"/> -->
			<!-- ISOLATION:READ_COMMITTED:本事务只能读取未提交的数据,如另一个事务无关 -->
			<!-- PROPERGATION_REQUIRES_NEW:当事务传播方式为新建,隔离级别为SERIALIZABLE时,其中的一个事务可能取到一个为SERIALIZABLE隔离级别的数据,而此数据为单线程,造成事务被挂起,无法继续执行-->
			<!-- <tx:method name="save*" propagation="REQUIRES_NEW" isolation="REPEATABLE_READ"/> -->
			<!-- ISOLATION:REPEATABLE_READ:不允许重复读,A事务前后读取的数据无论B事务是否提交结果是一样的 -->
			<tx:method name="save*" propagation="REQUIRES_NEW"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 事务针对的切点配置 -->
	<aop:config>
		<aop:pointcut expression="execution(* framework.Spring.transaction.dao.impl.PersonDaoImplA.*(..))" id="ponitcutAService"/>
		<!-- 引用事务隔离级别和传播方式 -->
		<aop:advisor advice-ref="adviceTransactionManagerJdbcA" pointcut-ref="ponitcutAService"/>
	</aop:config>
	
	<aop:config>
		<aop:pointcut expression="execution(* framework.Spring.transaction.dao.impl.PersonDaoImplB.*(..))" id="ponitcutBService"/>
		<!-- 引用事务隔离级别和传播方式 -->
		<aop:advisor advice-ref="adviceTransactionManagerJdbcB" pointcut-ref="ponitcutBService"/>
	</aop:config>
	
<!-- 	<bean id="personDao" class="framework.Spring.transaction.dao.impl.PersonDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> -->
		<!-- 此种方式事务不可用 -->
<!-- 	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				取得session工具类方式
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>framework/Spring/transaction/bean/Person.hbm.xml</value>
				<value>framework/Spring/transaction/bean/Department.hbm.xml</value>
			</list>
		</property>
	</bean> -->

	<!-- 声明事务管理器 -->
<!-- 	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>  -->
	<!-- 数据源配置方式2 使用hibernate的自身配置(可自动生成bean对应的表),此种方式事务无法提交,暂未找到解决方式-->
<!-- 	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	</bean> -->


	
	<!-- Spring事务配置的五种方式 -->
	<!-- 第一种方式：每个Bean都有一个代理 -->
<!-- 	<bean id="personDaoProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="target" ref="personDao"></property>
		<property name="proxyInterfaces" value="framework.Spring.transaction.dao.PersonDao"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean> -->
	
<!-- 	<bean id="personDao" class="framework.Spring.transaction.dao.impl.PersonDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean> -->
	

	<!-- 配置事务传播属性 -->
	<!-- spring事务传播的七种方式 -->
	<!-- required 支持当前事务,如果当前没有事务则新建一个事务 -->
	<!-- supports 支持当前事务,如果没有事务,则不执行事务 -->
	<!-- mandatory 支持当前事务,如果没有事务,就抛异常 -->
	<!-- require new 不支持当前事务,每个请求都新建一个事务 -->
	<!-- not supported 当前事务挂起,取消事务支持 -->
	<!-- never 取消当前事务,如果存在事务,则抛异常,一个方法中的事务如果设置为never则不会存在事务,没有事务提交和,异常回滚功能,每个插入会更新操作,都会生成表记录,而不会多次操作没有异常后才提交,然后生成表记录 -->
	<!-- nested 嵌套事务,如果当前存在事务,则创建一个嵌套事务,如果不存在,则新建一个事务 -->	
	<!-- hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice> -->
	
	<!-- 配置参与事务的事与方式或者包 -->
		<!-- execution(* com.aptech.jb.epet.dao.hibimpl.*.*(..)) -->
		<!-- 第一个*代表所有返回值类型,第二个*代表所有类,第三个*代表所有方法名,圆括号中的两个点代码方法名中的所有参数 -->
		<!-- 引用事务传播属性的方式集合 -->
<!-- 	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* framework.Spring.transaction.dao.impl.*.*(..))" id="managerMethod"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="managerMethod"/>
	</aop:config>
 -->
<!-- 	<bean id="personDao" class="framework.Spring.transaction.dao.impl.PersonDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="personService"
		class="framework.Spring.transaction.service.impl.PersonServiceImpl">
		<property name="personDao" ref="personDao"/>
	</bean>
	<bean id="personAction" class="framework.Spring.transaction.action.PersonAction">
		<property name="personService">
			<ref local="personService" />
		</property>
	</bean> -->
	
	<!-- 为每个bean设置一个代理 -->
<!-- 	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean name="personDaoInterface" class="framework.Spring.transaction.dao.PersonDao"></bean>
	<bean id="personDaoProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="target" ref="personDao"></property>
		<property name="proxyInterfaces" ref="personDaoInterface"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property> 
	</bean>
-->

	<!-- 1 构造注入 -->
	<!-- 1.1.1 属性注入(使用type方式) -->
	<bean name="propertyType" class="framework.Spring.injection.constructon.ConstructonInjectionPropertyBean">
		<!-- 构造注入参数或局部变量 -->
		<!-- 根据构造的顺序来注入,否则会报错,而且必须指定类型 -->
	<constructor-arg type="java.lang.String" value="neo"></constructor-arg>
	<constructor-arg type="int" value="30"></constructor-arg>
	  </bean>
	  <!-- 1.1.2 属性注入(使用index方式,可避免多个同类型出现的情况) -->
	<bean name="propertyIndex" class="framework.Spring.injection.constructon.ConstructonInjectionPropertyBean">
		<!-- 构造注入参数或局部变量 -->
		<!-- 根据构造的顺序来注入,否则会报错,而且必须指定类型 -->
	<constructor-arg index="0" value="neo"></constructor-arg>
	<constructor-arg index="1" value="30"></constructor-arg>
	  </bean>   
	  <!-- 1.2 对象注入 -->
	<bean name="object" class="framework.Spring.injection.constructon.ConstructonInjectionObjectBean">
		<constructor-arg>
			<ref bean="propertyIndex"/>
		</constructor-arg>
		<constructor-arg type="java.lang.String" value="a new class"></constructor-arg>
	</bean>
	
	<!-- 2 setter注入 -->
	<!-- 2.1 全局变量注入 -->
	<bean name="setterInjectionPropertyBean" class="framework.Spring.injection.setter.SetterInjectionPropertyBean">
		<property name="name" value="tom"></property>
		<property name="age">
			<value>33</value>
		</property>
	</bean>
	<!-- 2.2 对象注入 -->
	<bean name="setterInjectionObjectyBean" class="framework.Spring.injection.setter.SetterInjectionObjectyBean">
		<property name="year" value="20"></property>
		<!-- <property name="setterInjectionPropertyBean" ref="setterInjectionPropertyBean"></property> -->
		<property name="setterInjectionPropertyBean">
			<ref bean="setterInjectionPropertyBean"/>
		</property>
	</bean>
</beans>